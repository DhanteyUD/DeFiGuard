events {
    worker_connections 1024;
}

http {
    upstream defiguard {
        server defiguard:8888;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name your-domain.com www.your-domain.com;  # Change this

        # Redirect HTTP to HTTPS (uncomment when SSL is ready)
        # return 301 https://$server_name$request_uri;

        # Health check endpoint (public)
        location /health {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://defiguard/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Status endpoint (public)
        location /status {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://defiguard/status;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Agent submission endpoints (for Fetch.ai network)
        location /submit {
            limit_req zone=api_limit burst=50 nodelay;
            proxy_pass http://defiguard/submit;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Root path
        location / {
            return 200 '{"service":"DeFiGuard","version":"1.0.0","status":"running"}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS configuration (uncomment when SSL is ready)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com www.your-domain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/fullchain.pem;
    #     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #
    #     # Same location blocks as HTTP
    # }
}